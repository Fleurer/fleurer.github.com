=尾递归优化=

* Without tail call optimization each recursive method call creates a new stack frame thereby growing the execution stack.
* Tail call optimization prevent the stack from growing by replacing the callers frame by the called method's frame.
* but this optimization can only be done if the infomation in the calling frame is no longer needed.

==hotspot==

* the Hotspot VM features mixed execution stacks. 
    - An interpreted method's frame might be followed by a compiled method's frame and vice vesa.
* Recognition
    - For Java bytecode the recognition of tail calls is also quite simple. A call is a tail call if the method call instruction (invokestatic, invokevirtual, invokeinterface) is immediately followed by one of the return instructions (ireturn, etc) and the method containing the tail call is not synchronized. There must be no exception handler installed for the call instruction.  //只要java字节码中调用方法的指令跟在返回指令之后，就是了。
    
