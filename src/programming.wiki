= programming =

%toc

== Ruby ==

面向人类的程序设计语言。

=== sinatra ===

== C ==

.h 文件里的只是一堆字符串。

=== 链接和装载 ===

动机: 使程序模块化(.o, .so, .so, .dll...)

| ar      | 列出目标文件         |
| nm      | 列出目标文件的符号表 |
| readelf | 可以读elf文件的信息  |
| strip   | 去掉符号表和调试信息 |

== 线程同步 ==

无论何时，只要单个资源需要在多个用户间共享，就必须处理一致性问题。

即使是所谓“无副作用”的函数式编程，也只是计算时的无副作用。处理IO时同样需要处理同步问题。

=== 信号量 ===
=== 锁 ===

== FP ==

=== haskell ===

* [http://www.haskell.org/hoogle/ Hoogle] 查阅库函数超级方便。

教程
* [http://fleurer-lee.com haskell趣学指南] 可作入门教程。

=== Monad & 范畴论 ===

感觉...与其说Monad是来自范畴论，不如说Haskell是参照范畴论而构造了那套强大的类型系统。

*动机*

[http://ncatlab.org/nlab/show/category+theory]

    Category theory was introduced by Samuel Eilenberg and Saunders Mac Lane in the 1945 paper General theory of natural equivalences. The reason for introducing categories was to introduce *functors*, and the reason for introducing functors was to introduce *natural transformations* (more specifically natural equivalences) in order to define what *natural* means in mathematics.

一开始这篇论文是遭到驳回的。。。所谓"abstract nonsense"。

Monad里面的bind(>>=)和unit(return)就是natural transformations。
    
    The basic idea of category theory is to shift attention from the study of objects to the study of maps or relations between objects: of (homo)morphisms between objects.

像王猫猫说的，范畴论就是使用 *图* 来表示几乎“所有数学的概念”。而图论正是研究物件与其间关系的理论。
    




